name: GLB Optimizer CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Install Node.js dependencies
      run: |
        npm install -g @gltf-transform/cli@4.2.0
        npm install -g gltfpack@0.24.0
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov pytest-mock
        pip install -r requirements.txt || pip install flask sqlalchemy psycopg2-binary gunicorn celery redis python-dotenv
    
    - name: Install KTX-Software (for texture compression tests)
      run: |
        wget https://github.com/KhronosGroup/KTX-Software/releases/download/v4.1.0/ktx_4.1.0_linux.tar.gz
        tar -xzf ktx_4.1.0_linux.tar.gz
        sudo cp ktx_4.1.0_linux/bin/* /usr/local/bin/
        sudo chmod +x /usr/local/bin/ktx*
    
    - name: Run security tests
      run: |
        pytest tests/test_security.py -v --tb=short
    
    - name: Run unit tests
      run: |
        pytest tests/test_optimizer_unit.py tests/test_config.py -v --tb=short
    
    - name: Run compression method tests
      run: |
        pytest tests/test_compression_methods.py -v --tb=short
    
    - name: Run integration tests
      run: |
        pytest tests/test_integration.py -v --tb=short
    
    - name: Run full test suite with coverage
      run: |
        pytest --cov=optimizer --cov=config --cov-report=xml --cov-report=term-missing --cov-fail-under=85
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install security scanning tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
    
    - name: Run Bandit security scan
      run: |
        bandit -r optimizer.py config.py app.py -f json -o bandit-report.json || true
        bandit -r optimizer.py config.py app.py
    
    - name: Run Safety vulnerability scan
      run: |
        safety check --json --output safety-report.json || true
        safety check
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  code-quality:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install code quality tools
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy
    
    - name: Run Black code formatting check
      run: |
        black --check --diff optimizer.py config.py app.py tests/
    
    - name: Run isort import sorting check
      run: |
        isort --check-only --diff optimizer.py config.py app.py tests/
    
    - name: Run Flake8 linting
      run: |
        flake8 optimizer.py config.py app.py --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 optimizer.py config.py app.py --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Run MyPy type checking
      run: |
        mypy optimizer.py config.py --ignore-missing-imports --no-strict-optional

  docker-build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      run: |
        docker build -t glb-optimizer:test .
    
    - name: Test Docker image
      run: |
        docker run --rm glb-optimizer:test python -c "import optimizer; print('Import successful')"

  performance-test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-benchmark
        pip install flask sqlalchemy psycopg2-binary
        npm install -g @gltf-transform/cli@4.2.0
    
    - name: Run performance benchmarks
      run: |
        pytest tests/ -k "not slow" --benchmark-only --benchmark-json=benchmark.json || true
    
    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: benchmark-results
        path: benchmark.json