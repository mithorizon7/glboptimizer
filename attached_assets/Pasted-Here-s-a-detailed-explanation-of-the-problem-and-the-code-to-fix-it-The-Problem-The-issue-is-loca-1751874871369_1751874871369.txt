Here's a detailed explanation of the problem and the code to fix it.

The Problem

The issue is located in the frontend JavaScript file, static/script.js. When a file is selected (either by dragging and dropping or using the "Choose File" button), the handleFileSelect function is called. This function was overwriting the HTML content of the drop zone, which inadvertently destroyed the original file input element and its event listeners. As a result, any subsequent attempts to select a file would fail because the necessary JavaScript event handlers were no longer attached to the input element.

The Solution

To fix this, I have made the following corrections to static/script.js and templates/index.html:

Preserved the File Input: The handleFileSelect function has been modified to no longer replace the entire drop zone's HTML. Instead, it now simply updates the text content to display the selected file's name and size. This ensures the file input element and its event listeners remain intact.

Improved UI Reset Logic: The resetUI function has been updated to correctly restore the initial state of the drop zone, ensuring that the file input is always ready for a new selection.

Clearer "Change File" Action: A dedicated "Change File" button has been added, which is now the correct way to select a new file after one has already been chosen.

Here is the corrected code. You can replace the content of the respective files with the code below.

Corrected templates/index.html

HTML
<!DOCTYPE html>
<html lang="en" data-bs-theme="dark">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>GLB Optimizer - From 50MB to 5MB Instantly | AI Model Compression</title>
    <link href="https://cdn.replit.com/agent/bootstrap-agent-dark-theme.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <link href="{{ url_for('static', filename='style.css') }}" rel="stylesheet">
</head>
<body>
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-lg-10">
                <header class="text-center py-5">
                    <h1 class="display-3 mb-3 fw-bold">
                        From 50MB to 5MB. <span class="text-info">Instantly.</span>
                    </h1>
                    <p class="lead fs-4 mb-4">
                        Your web-based game can't handle a 50MB model. Our optimizer uses the same pipeline as professional game studios to shrink your GLB files by up to 90% while keeping every detail.
                    </p>
                    <div class="row justify-content-center mb-4">
                        <div class="col-md-8">
                            <div class="d-flex justify-content-center gap-4 flex-wrap">
                                <div class="text-center">
                                    <div class="h5 text-info mb-1">‚ú® AI Artists</div>
                                    <small class="text-muted">Fix bloated AI-generated models</small>
                                </div>
                                <div class="text-center">
                                    <div class="h5 text-info mb-1">üéÆ Game Devs</div>
                                    <small class="text-muted">Make assets game-ready instantly</small>
                                </div>
                                <div class="text-center">
                                    <div class="h5 text-info mb-1">üåê WebXR</div>
                                    <small class="text-muted">Lightning-fast mobile loading</small>
                                </div>
                            </div>
                        </div>
                    </div>
                </header>
            </div>
        </div>

        <div class="row justify-content-center" id="upload-section">
            <div class="col-lg-8">
                <div class="card">
                    <div class="card-body p-5">
                        <h3 class="card-title text-center mb-4">
                            <i class="fas fa-upload me-2"></i>
                            Upload GLB File
                        </h3>
                        
                        <div id="drop-zone" class="drop-zone text-center p-5 mb-4">
                            <i class="fas fa-cloud-upload-alt fa-3x mb-3 text-muted"></i>
                            <h5>Drag & drop your GLB file here</h5>
                            <p class="text-muted">or click to select a file</p>
                            <input type="file" id="file-input" accept=".glb" style="display: none;">
                            <button type="button" class="btn btn-outline-secondary" onclick="document.getElementById('file-input').click()">
                                <i class="fas fa-folder-open me-2"></i>
                                Choose File
                            </button>
                        </div>

                        <div id="file-info" class="alert alert-info" style="display: none;">
                            <i class="fas fa-info-circle me-2"></i>
                            <span id="file-details"></span>
                             <button id="change-file-btn" class="btn btn-sm btn-outline-info ms-3">Change File</button>
                        </div>

                        <div id="optimization-settings" class="card mt-4" style="display: none;">
                            <div class="card-body">
                                <h6 class="card-title">Optimization Settings</h6>
                                <div class="row">
                                    <div class="col-md-6">
                                        <label for="quality-level" class="form-label">Quality Level</label>
                                        <select id="quality-level" class="form-select">
                                            <option value="high" selected>High Quality (Recommended)</option>
                                            <option value="balanced">Balanced</option>
                                            <option value="maximum_compression">Maximum Compression</option>
                                        </select>
                                        <div class="form-text">High quality preserves visual fidelity, maximum compression prioritizes file size.</div>
                                    </div>
                                    <div class="col-md-6">
                                        <label class="form-label">Advanced Features</label>
                                        <div class="form-check">
                                            <input class="form-check-input" type="checkbox" id="enable-lod" checked>
                                            <label class="form-check-label" for="enable-lod">
                                                Generate LOD (Level of Detail)
                                            </label>
                                        </div>
                                        <div class="form-check">
                                            <input class="form-check-input" type="checkbox" id="enable-simplification" checked>
                                            <label class="form-check-label" for="enable-simplification">
                                                Polygon Simplification
                                            </label>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="text-center mt-4">
                            <button id="upload-btn" class="btn btn-primary btn-lg" disabled>
                                <i class="fas fa-rocket me-2"></i>
                                Start Optimization
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="row justify-content-center mt-4" id="progress-section" style="display: none;">
            <div class="col-lg-8">
                <div class="card">
                    <div class="card-body p-4">
                        <h4 class="card-title mb-4">
                            <i class="fas fa-cogs me-2"></i>
                            Optimization Progress
                        </h4>
                        
                        <div class="mb-3">
                            <div class="progress" style="height: 20px;">
                                <div id="progress-bar" class="progress-bar progress-bar-striped progress-bar-animated" 
                                     role="progressbar" style="width: 0%"></div>
                            </div>
                        </div>
                        
                        <div class="row">
                            <div class="col-md-6">
                                <p class="mb-1"><strong>Current Step:</strong></p>
                                <p id="current-step" class="text-muted">Initializing...</p>
                            </div>
                            <div class="col-md-6">
                                <p class="mb-1"><strong>Progress:</strong></p>
                                <p id="progress-text" class="text-muted">0%</p>
                            </div>
                        </div>
                        
                        <div class="row mt-3" id="size-info" style="display: none;">
                            <div class="col-md-4">
                                <div class="text-center">
                                    <h6>Original Size</h6>
                                    <span id="original-size" class="badge bg-secondary fs-6"></span>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="text-center">
                                    <h6>Optimized Size</h6>
                                    <span id="optimized-size" class="badge bg-success fs-6"></span>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="text-center">
                                    <h6>Compression</h6>
                                    <span id="compression-ratio" class="badge bg-primary fs-6"></span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="row justify-content-center mt-4" id="results-section" style="display: none;">
            <div class="col-lg-8">
                <div class="card">
                    <div class="card-body p-4">
                        <h4 class="card-title mb-4">
                            <i class="fas fa-check-circle text-success me-2"></i>
                            Optimization Complete
                        </h4>
                        
                        <div class="row">
                            <div class="col-md-6">
                                <h6>Optimization Statistics</h6>
                                <ul class="list-unstyled">
                                    <li><strong>Original Size:</strong> <span id="result-original-size"></span></li>
                                    <li><strong>Optimized Size:</strong> <span id="result-optimized-size"></span></li>
                                    <li><strong>Size Reduction:</strong> <span id="result-compression"></span></li>
                                    <li><strong>Processing Time:</strong> <span id="result-time"></span></li>
                                </ul>
                            </div>
                            <div class="col-md-6">
                                <h6>Optimization Steps Applied</h6>
                                <ul class="list-unstyled">
                                    <li><i class="fas fa-check text-success me-2"></i>Cleanup & Deduplication (Prune, Weld, Join)</li>
                                    <li><i class="fas fa-check text-success me-2"></i>Geometry Compression (Meshopt + Draco fallback)</li>
                                    <li><i class="fas fa-check text-success me-2"></i>Texture Compression (KTX2/BasisU + Channel Packing)</li>
                                    <li><i class="fas fa-check text-success me-2"></i>Animation Optimization (Resample + Quantize)</li>
                                    <li><i class="fas fa-check text-success me-2"></i>LOD Generation & Progressive Delivery</li>
                                    <li><i class="fas fa-check text-success me-2"></i>Final Bundle & Minify</li>
                                </ul>
                            </div>
                        </div>
                        
                        <div class="row mt-4" id="model-viewer-section">
                            <div class="col-12">
                                <h6 class="mb-3">
                                    <i class="fas fa-cube me-2"></i>
                                    3D Model Comparison
                                </h6>
                                <div class="row">
                                    <div class="col-md-6">
                                        <div class="card">
                                            <div class="card-header text-center">
                                                <h6 class="mb-0">Original Model</h6>
                                                <small class="text-muted" id="original-model-size"></small>
                                            </div>
                                            <div class="card-body p-0">
                                                <div id="original-viewer" class="model-viewer"></div>
                                                <div class="viewer-controls p-2">
                                                    <small class="text-muted">
                                                        <i class="fas fa-mouse me-1"></i> Click & drag to rotate
                                                        <i class="fas fa-expand-arrows-alt ms-2 me-1"></i> Scroll to zoom
                                                    </small>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="card">
                                            <div class="card-header text-center">
                                                <h6 class="mb-0">Optimized Model</h6>
                                                <small class="text-muted" id="optimized-model-size"></small>
                                            </div>
                                            <div class="card-body p-0">
                                                <div id="optimized-viewer" class="model-viewer"></div>
                                                <div class="viewer-controls p-2">
                                                    <small class="text-muted">
                                                        <i class="fas fa-mouse me-1"></i> Click & drag to rotate
                                                        <i class="fas fa-expand-arrows-alt ms-2 me-1"></i> Scroll to zoom
                                                    </small>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="text-center mt-3">
                                    <button id="sync-cameras-btn" class="btn btn-outline-secondary btn-sm me-2" 
                                            title="Cameras sync automatically for easier comparison. Click to toggle.">
                                        <i class="fas fa-link me-1"></i>
                                        Sync Cameras
                                    </button>
                                    <button id="reset-cameras-btn" class="btn btn-outline-secondary btn-sm">
                                        <i class="fas fa-undo me-1"></i>
                                        Reset Views
                                    </button>
                                </div>
                            </div>
                        </div>

                        <div class="text-center mt-4">
                            <button id="download-btn" class="btn btn-success btn-lg me-3">
                                <i class="fas fa-download me-2"></i>
                                Download Optimized GLB
                            </button>
                            <button id="new-optimization-btn" class="btn btn-outline-secondary btn-lg">
                                <i class="fas fa-plus me-2"></i>
                                Optimize Another File
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="row justify-content-center mt-4" id="error-section" style="display: none;">
            <div class="col-lg-8">
                <div class="alert alert-danger">
                    <h5 class="alert-heading">
                        <i class="fas fa-exclamation-triangle me-2"></i>
                        Optimization Failed
                    </h5>
                    <p id="error-message" class="mb-3"></p>
                    
                    <div id="error-details" class="mb-3" style="display: none;">
                        <h6>Error Details:</h6>
                        <div id="error-category" class="text-muted small mb-2"></div>
                        <pre id="technical-details" class="bg-dark text-light p-2 rounded small" style="max-height: 200px; overflow-y: auto;"></pre>
                    </div>
                    
                    <div class="d-flex gap-2 flex-wrap">
                        <button id="show-error-details-btn" class="btn btn-outline-danger btn-sm" style="display: none;">
                            <i class="fas fa-info-circle me-1"></i>
                            Show Technical Details
                        </button>
                        <button id="download-logs-btn" class="btn btn-outline-secondary btn-sm" style="display: none;">
                            <i class="fas fa-download me-1"></i>
                            Download Error Log
                        </button>
                    </div>
                    
                    <hr>
                    <button id="retry-btn" class="btn btn-outline-danger">
                        <i class="fas fa-redo me-2"></i>
                        Try Again
                    </button>
                </div>
            </div>
        </div>

        <footer class="text-center py-5 mt-5">
            <div class="row">
                <div class="col-lg-8 mx-auto">
                    <h6>Optimization Pipeline</h6>
                    <p class="text-muted small">
                        This tool implements the industry-standard 6-step GLB optimization workflow:
                        <br><strong>1.</strong> Cleanup & Deduplication (prune unused data, weld vertices, join meshes)
                        <br><strong>2.</strong> Geometry Compression (EXT_meshopt_compression with quantization + Draco fallback)
                        <br><strong>3.</strong> Texture Compression (KTX2/BasisU with channel packing, UASTC for normals)
                        <br><strong>4.</strong> Animation Optimization (resample to 30fps, compress with 16-bit quantization)
                        <br><strong>5.</strong> LOD Generation (3 levels of detail for progressive delivery)
                        <br><strong>6.</strong> Final Bundle (embed textures, apply final compression)
                    </p>
                    <p class="text-muted small">
                        Powered by <strong>gltf-transform v4.2.0</strong> and <strong>gltfpack v0.24.0</strong>
                        <br>Achieves 5-10√ó compression while maintaining visual fidelity
                    </p>
                </div>
            </div>
        </footer>

        <div class="row justify-content-center mt-5 pt-5">
            <div class="col-lg-10">
                <div class="text-center mb-5">
                    <h2 class="h1 mb-3">The Same Tools <span class="text-info">AAA Studios</span> Use</h2>
                    <p class="lead text-muted">Industry-standard optimization pipeline used by professional game developers worldwide</p>
                </div>
                
                <div class="row g-4">
                    <div class="col-md-6">
                        <div class="card h-100 border-0 bg-dark">
                            <div class="card-body p-4">
                                <div class="d-flex align-items-center mb-3">
                                    <div class="feature-icon bg-info bg-gradient rounded-circle p-2 me-3">
                                        <i class="fas fa-magic text-white"></i>
                                    </div>
                                    <h5 class="mb-0">Ultra-Efficient Geometry</h5>
                                </div>
                                <p class="text-muted">Adaptive compression engine using Meshoptimizer, Google's Draco, and hybrid optimization. Our AI analyzes your model complexity and automatically selects the optimal compression strategy, achieving up to 95% geometry reduction while preserving visual quality.</p>
                            </div>
                        </div>
                    </div>
                    
                    <div class="col-md-6">
                        <div class="card h-100 border-0 bg-dark">
                            <div class="card-body p-4">
                                <div class="d-flex align-items-center mb-3">
                                    <div class="feature-icon bg-success bg-gradient rounded-circle p-2 me-3">
                                        <i class="fas fa-tachometer-alt text-white"></i>
                                    </div>
                                    <h5 class="mb-0">GPU-Ready Textures</h5>
                                </div>
                                <p class="text-muted">Revolutionary texture compression using KTX2/Basis Universal and WebP formats. Our system automatically tests both UASTC (high quality) and ETC1S (maximum compression) modes, achieving 80-95% texture size reduction with intelligent quality preservation.</p>
                            </div>
                        </div>
                    </div>
                    
                    <div class="col-md-6">
                        <div class="card h-100 border-0 bg-dark">
                            <div class="card-body p-4">
                                <div class="d-flex align-items-center mb-3">
                                    <div class="feature-icon bg-warning bg-gradient rounded-circle p-2 me-3">
                                        <i class="fas fa-mobile-alt text-white"></i>
                                    </div>
                                    <h5 class="mb-0">Mobile-Optimized</h5>
                                </div>
                                <p class="text-muted">Perfect for WebXR, mobile games, and VR headsets. Your optimized models load lightning-fast even on low-bandwidth connections and render smoothly on mobile GPUs.</p>
                            </div>
                        </div>
                    </div>
                    
                    <div class="col-md-6">
                        <div class="card h-100 border-0 bg-dark">
                            <div class="card-body p-4">
                                <div class="d-flex align-items-center mb-3">
                                    <div class="feature-icon bg-danger bg-gradient rounded-circle p-2 me-3">
                                        <i class="fas fa-robot text-white"></i>
                                    </div>
                                    <h5 class="mb-0">AI-Model Ready</h5>
                                </div>
                                <p class="text-muted">Fix bloated AI-generated models from tools like Luma AI, Midjourney 3D, or Meshy. Transform millions of polygons into game-ready assets that actually work in your projects.</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="row justify-content-center mt-5 pt-5">
            <div class="col-lg-8">
                <div class="card border-info">
                    <div class="card-body text-center p-5">
                        <h3 class="mb-3">Free Tier ‚Ä¢ <small class="text-info">Perfect for Testing</small></h3>
                        <div class="row align-items-center">
                            <div class="col-md-8">
                                <ul class="list-unstyled text-start mb-0">
                                    <li class="mb-2"><i class="fas fa-check text-success me-2"></i> Up to 25MB file size</li>
                                    <li class="mb-2"><i class="fas fa-check text-success me-2"></i> Full optimization pipeline</li>
                                    <li class="mb-2"><i class="fas fa-check text-success me-2"></i> 3D comparison viewer</li>
                                    <li class="mb-0"><i class="fas fa-check text-success me-2"></i> Professional-grade results</li>
                                </ul>
                            </div>
                            <div class="col-md-4">
                                <div class="text-center">
                                    <p class="text-muted small mb-2">Need more?</p>
                                    <button class="btn btn-outline-info" disabled>
                                        Pro Tier Coming Soon
                                    </button>
                                    <p class="text-muted small mt-2">
                                        ‚Ä¢ 250MB+ files<br>
                                        ‚Ä¢ Batch processing<br>
                                        ‚Ä¢ API access
                                    </p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
    <script type="importmap">
    {
        "imports": {
            "three": "https://unpkg.com/three@0.158.0/build/three.module.js",
            "three/addons/": "https://unpkg.com/three@0.158.0/examples/jsm/"
        }
    }
    </script>
    <script type="module" src="{{ url_for('static', filename='script.js') }}"></script>
</body>
</html>
Corrected static/script.js

JavaScript
// Three.js ES Module Imports
import * as THREE from 'three';
import { GLTFLoader } from 'three/addons/loaders/GLTFLoader.js';
import { OrbitControls } from 'three/addons/controls/OrbitControls.js';

// GLB Optimizer Frontend JavaScript

class GLBOptimizer {
    constructor() {
        this.currentTaskId = null;
        this.pollInterval = null;
        this.selectedFile = null;
        
        this.initializeElements();
        this.setupEventListeners();
    }
    
    initializeElements() {
        // Get DOM elements
        this.dropZone = document.getElementById('drop-zone');
        this.fileInput = document.getElementById('file-input');
        this.fileInfo = document.getElementById('file-info');
        this.fileDetails = document.getElementById('file-details');
        this.uploadBtn = document.getElementById('upload-btn');
        this.optimizationSettings = document.getElementById('optimization-settings');
        this.qualityLevel = document.getElementById('quality-level');
        this.enableLod = document.getElementById('enable-lod');
        this.enableSimplification = document.getElementById('enable-simplification');
        this.changeFileBtn = document.getElementById('change-file-btn');
        
        // 3D Viewer elements
        this.modelViewerSection = document.getElementById('model-viewer-section');
        this.originalViewer = document.getElementById('original-viewer');
        this.optimizedViewer = document.getElementById('optimized-viewer');
        this.originalModelSize = document.getElementById('original-model-size');
        this.optimizedModelSize = document.getElementById('optimized-model-size');
        this.syncCamerasBtn = document.getElementById('sync-cameras-btn');
        this.resetCamerasBtn = document.getElementById('reset-cameras-btn');
        
        // 3D Viewer instances
        this.viewer3D = new ModelViewer3D();
        
        // Sections
        this.uploadSection = document.getElementById('upload-section');
        this.progressSection = document.getElementById('progress-section');
        this.resultsSection = document.getElementById('results-section');
        this.errorSection = document.getElementById('error-section');
        
        // Progress elements
        this.progressBar = document.getElementById('progress-bar');
        this.currentStep = document.getElementById('current-step');
        this.progressText = document.getElementById('progress-text');
        this.sizeInfo = document.getElementById('size-info');
        this.originalSize = document.getElementById('original-size');
        this.optimizedSize = document.getElementById('optimized-size');
        this.compressionRatio = document.getElementById('compression-ratio');
        
        // Result elements
        this.resultOriginalSize = document.getElementById('result-original-size');
        this.resultOptimizedSize = document.getElementById('result-optimized-size');
        this.resultCompression = document.getElementById('result-compression');
        this.resultTime = document.getElementById('result-time');
        this.downloadBtn = document.getElementById('download-btn');
        this.newOptimizationBtn = document.getElementById('new-optimization-btn');
        
        // Error elements
        this.errorMessage = document.getElementById('error-message');
        this.errorDetails = document.getElementById('error-details');
        this.errorCategory = document.getElementById('error-category');
        this.technicalDetails = document.getElementById('technical-details');
        this.showErrorDetailsBtn = document.getElementById('show-error-details-btn');
        this.downloadLogsBtn = document.getElementById('download-logs-btn');
        this.retryBtn = document.getElementById('retry-btn');
    }
    
    setupEventListeners() {
        // File input change
        this.fileInput.addEventListener('change', (e) => {
            if (e.target.files.length > 0) {
                this.handleFileSelect(e.target.files[0]);
            }
        });
        
        // Drag and drop
        this.dropZone.addEventListener('click', () => {
            this.fileInput.click();
        });
        
        this.dropZone.addEventListener('dragover', (e) => {
            e.preventDefault();
            this.dropZone.classList.add('dragover');
        });
        
        this.dropZone.addEventListener('dragleave', () => {
            this.dropZone.classList.remove('dragover');
        });
        
        this.dropZone.addEventListener('drop', (e) => {
            e.preventDefault();
            this.dropZone.classList.remove('dragover');
            
            const files = e.dataTransfer.files;
            if (files.length > 0) {
                this.handleFileSelect(files[0]);
            }
        });
        
        // Upload button
        this.uploadBtn.addEventListener('click', () => {
            this.startOptimization();
        });
        
        // Download button
        this.downloadBtn.addEventListener('click', () => {
            this.downloadOptimizedFile();
        });
        
        // New optimization button
        this.newOptimizationBtn.addEventListener('click', () => {
            this.resetUI();
        });
        
        // Retry button
        this.retryBtn.addEventListener('click', () => {
            this.resetUI();
        });

        // Change file button
        this.changeFileBtn.addEventListener('click', () => {
            this.fileInput.click();
        });
        
        // 3D Viewer controls
        this.syncCamerasBtn.addEventListener('click', () => {
            // Toggle camera sync state
            if (this.viewer3D.isSynced) {
                this.viewer3D.unsyncCameras();
                this.syncCamerasBtn.innerHTML = '<i class="fas fa-link me-1"></i>Sync Cameras';
                this.syncCamerasBtn.classList.remove('btn-success');
                this.syncCamerasBtn.classList.add('btn-outline-secondary');
            } else {
                this.viewer3D.syncCameras();
                this.syncCamerasBtn.innerHTML = '<i class="fas fa-unlink me-1"></i>Unsync Cameras';
                this.syncCamerasBtn.classList.remove('btn-outline-secondary');
                this.syncCamerasBtn.classList.add('btn-success');
            }
        });
        
        this.resetCamerasBtn.addEventListener('click', () => {
            this.viewer3D.resetCameras();
        });
    }
    
    handleFileSelect(file) {
        // Validate file type
        if (!file.name.toLowerCase().endsWith('.glb')) {
            this.showError('Please select a valid GLB file.');
            return;
        }
        
        // Validate file size (100MB limit)
        const maxSize = 100 * 1024 * 1024; // 100MB
        if (file.size > maxSize) {
            this.showError('File size must be less than 100MB.');
            return;
        }
        
        this.selectedFile = file;
        
        // Show file info
        this.fileDetails.textContent = `Selected: ${file.name} (${this.formatFileSize(file.size)})`;
        this.fileInfo.style.display = 'block';
        this.dropZone.style.display = 'none';
        
        // Show optimization settings
        this.optimizationSettings.style.display = 'block';
        
        // Enable upload button
        this.uploadBtn.disabled = false;
    }
    
    async startOptimization() {
        if (!this.selectedFile) {
            this.showError('Please select a file first.');
            return;
        }
        
        // Create form data with optimization settings
        const formData = new FormData();
        formData.append('file', this.selectedFile);
        formData.append('quality_level', this.qualityLevel.value);
        formData.append('enable_lod', this.enableLod.checked);
        formData.append('enable_simplification', this.enableSimplification.checked);
        
        try {
            // Upload file and start optimization
            const response = await fetch('/upload', {
                method: 'POST',
                body: formData
            });
            
            const result = await response.json();
            
            if (!response.ok) {
                throw new Error(result.error || 'Upload failed');
            }
            
            // Store task ID and start polling
            this.currentTaskId = result.task_id;
            this.originalSize.textContent = this.formatFileSize(result.original_size);
            
            // Show progress section
            this.showProgressSection();
            this.startProgressPolling();
            
        } catch (error) {
            this.showError(error.message);
        }
    }
    
    showProgressSection() {
        this.uploadSection.style.display = 'none';
        this.progressSection.style.display = 'block';
        this.resultsSection.style.display = 'none';
        this.errorSection.style.display = 'none';
    }
    
    startProgressPolling() {
        this.pollInterval = setInterval(async () => {
            try {
                const response = await fetch(`/progress/${this.currentTaskId}`);
                const progress = await response.json();
                
                if (!response.ok) {
                    throw new Error(progress.error || 'Failed to get progress');
                }
                
                this.updateProgress(progress);
                
                if (progress.completed) {
                    clearInterval(this.pollInterval);
                    
                    if (progress.status === 'completed') {
                        this.showResults(progress);
                    } else if (progress.status === 'error') {
                        this.showError(progress.error);
                    }
                }
                
            } catch (error) {
                clearInterval(this.pollInterval);
                this.showError(error.message);
            }
        }, 1000); // Poll every second
    }
    
    updateProgress(progress) {
        // Update progress bar
        this.progressBar.style.width = `${progress.progress}%`;
        this.progressText.textContent = `${progress.progress}%`;
        
        // Update current step
        this.currentStep.textContent = progress.step;
        
        // Show size info if available
        if (progress.optimized_size > 0) {
            this.optimizedSize.textContent = this.formatFileSize(progress.optimized_size);
            this.compressionRatio.textContent = `${progress.compression_ratio.toFixed(1)}%`;
            this.sizeInfo.style.display = 'block';
        }
    }
    
    showResults(progress) {
        // Hide progress section, show results and viewer
        this.progressSection.style.display = 'none';
        this.resultsSection.style.display = 'block';
        this.modelViewerSection.style.display = 'block';
        
        // Update result statistics
        this.resultOriginalSize.textContent = this.formatFileSize(progress.original_size);
        this.resultOptimizedSize.textContent = this.formatFileSize(progress.optimized_size);
        this.resultCompression.textContent = `${progress.compression_ratio.toFixed(1)}%`;
        this.resultTime.textContent = `${progress.processing_time.toFixed(1)}s`;
        
        // Add performance metrics if available
        if (progress.performance_metrics) {
            const performanceHtml = this.generatePerformanceMetrics(progress);
            const resultsContainer = document.querySelector('#results-section .container');
            const existingMetrics = resultsContainer.querySelector('.performance-metrics');
            
            if (existingMetrics) {
                existingMetrics.remove();
            }
            
            const metricsDiv = document.createElement('div');
            metricsDiv.className = 'performance-metrics';
            metricsDiv.innerHTML = performanceHtml;
            resultsContainer.appendChild(metricsDiv);
        }
        
        // Initialize 3D model viewer with before/after comparison
        this.initialize3DViewer(progress);
    }
    
    async downloadOptimizedFile() {
        if (!this.currentTaskId) return;
        
        try {
            const response = await fetch(`/download/${this.currentTaskId}`);
            
            if (!response.ok) {
                const error = await response.json();
                throw new Error(error.error || 'Download failed');
            }
            
            // Create download link
            const blob = await response.blob();
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `optimized_${this.selectedFile.name}`;
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            window.URL.revokeObjectURL(url);
            
            // Clean up task
            await fetch(`/cleanup/${this.currentTaskId}`, { method: 'POST' });
            
        } catch (error) {
            this.showError(error.message);
        }
    }
    
    showError(error) {
        // Hide other sections
        this.uploadSection.style.display = 'none';
        this.progressSection.style.display = 'none';
        this.resultsSection.style.display = 'none';
        this.errorSection.style.display = 'block';
        
        // Handle error object or string
        if (typeof error === 'object' && error !== null) {
            // Detailed error object
            this.errorMessage.textContent = error.user_message || error.error || 'An unknown error occurred';
            
            if (error.category || error.detailed_error) {
                // Show enhanced error details
                if (this.errorCategory) {
                    this.errorCategory.textContent = `Category: ${error.category || 'Unknown'}`;
                }
                if (this.technicalDetails && error.detailed_error) {
                    this.technicalDetails.textContent = error.detailed_error;
                }
                
                // Enable show details button
                if (this.showErrorDetailsBtn) {
                    this.showErrorDetailsBtn.style.display = 'inline-block';
                    this.showErrorDetailsBtn.onclick = () => {
                        if (this.errorDetails) {
                            const isHidden = this.errorDetails.style.display === 'none';
                            this.errorDetails.style.display = isHidden ? 'block' : 'none';
                            this.showErrorDetailsBtn.innerHTML = isHidden ? 
                                '<i class="fas fa-eye-slash me-1"></i>Hide Technical Details' : 
                                '<i class="fas fa-info-circle me-1"></i>Show Technical Details';
                        }
                    };
                }
            }
        } else {
            // Simple error string
            this.errorMessage.textContent = error || 'An unknown error occurred';
            
            // Hide enhanced error features
            if (this.showErrorDetailsBtn) {
                this.showErrorDetailsBtn.style.display = 'none';
            }
            if (this.errorDetails) {
                this.errorDetails.style.display = 'none';
            }
        }
        
        // Enable download logs button
        if (this.downloadLogsBtn && this.currentTaskId) {
            this.downloadLogsBtn.style.display = 'inline-block';
            this.downloadLogsBtn.onclick = () => {
                window.open(`/download-logs/${this.currentTaskId}`, '_blank');
            };
        }
        
        // Stop polling if active
        if (this.pollInterval) {
            clearInterval(this.pollInterval);
        }
    }
    
    resetUI() {
        // Clear current task
        this.currentTaskId = null;
        this.selectedFile = null;
        
        // Stop polling
        if (this.pollInterval) {
            clearInterval(this.pollInterval);
        }
        
        // Reset UI elements
        this.fileInput.value = '';
        this.fileInfo.style.display = 'none';
        this.dropZone.style.display = 'block';
        this.optimizationSettings.style.display = 'none';
        this.uploadBtn.disabled = true;
        
        // Reset progress
        this.progressBar.style.width = '0%';
        this.progressText.textContent = '0%';
        this.currentStep.textContent = 'Initializing...';
        this.sizeInfo.style.display = 'none';
        
        // Show upload section
        this.uploadSection.style.display = 'block';
        this.progressSection.style.display = 'none';
        this.resultsSection.style.display = 'none';
        this.errorSection.style.display = 'none';
        this.modelViewerSection.style.display = 'none';
        
        // Clear 3D viewers
        if (this.viewer3D) {
            this.originalViewer.innerHTML = '';
            this.optimizedViewer.innerHTML = '';
        }
    }
    
    formatFileSize(bytes) {
        if (bytes === 0) return '0 Bytes';
        
        const k = 1024;
        const sizes = ['Bytes', 'KB', 'MB', 'GB'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        
        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
    }

    generatePerformanceMetrics(progress) {
        if (!progress.performance_metrics) return '';
        
        const metrics = progress.performance_metrics;
        const readiness = metrics.web_game_readiness || {};
        
        return `
            <div class="card mt-3">
                <div class="card-body">
                    <h5 class="card-title">
                        <i class="fas fa-rocket me-2"></i>Performance Gains
                    </h5>
                    <div class="row">
                        <div class="col-md-4">
                            <div class="text-center">
                                <h6 class="text-info">Load Time</h6>
                                <h4 class="text-success">${metrics.estimated_performance_gains?.load_time_improvement || 'N/A'}</h4>
                                <small class="text-muted">Faster Loading</small>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="text-center">
                                <h6 class="text-info">GPU Memory</h6>
                                <h4 class="text-success">${metrics.estimated_performance_gains?.gpu_memory_savings || 'N/A'}</h4>
                                <small class="text-muted">Memory Savings</small>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="text-center">
                                <h6 class="text-info">Bandwidth</h6>
                                <h4 class="text-success">${metrics.estimated_performance_gains?.bandwidth_savings || 'N/A'}</h4>
                                <small class="text-muted">Data Savings</small>
                            </div>
                        </div>
                    </div>
                    <hr>
                    <div class="row">
                        <div class="col-md-12">
                            <h6>Web Game Readiness</h6>
                            <div class="d-flex gap-2 flex-wrap">
                                ${readiness.ready_for_streaming ? '<span class="badge bg-success">Streaming Ready</span>' : '<span class="badge bg-warning">Large for Streaming</span>'}
                                ${readiness.mobile_friendly ? '<span class="badge bg-success">Mobile Friendly</span>' : '<span class="badge bg-warning">Consider Mobile Optimization</span>'}
                                ${readiness.web_optimized ? '<span class="badge bg-success">Web Optimized</span>' : '<span class="badge bg-danger">Needs Further Optimization</span>'}
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        `;
    }
    
    initialize3DViewer(progress) {
        // Update model size displays
        this.originalModelSize.textContent = this.formatFileSize(progress.original_size);
        this.optimizedModelSize.textContent = this.formatFileSize(progress.optimized_size);
        
        // Initialize viewers with model URLs
        const originalUrl = `/original/${this.currentTaskId}`;
        const optimizedUrl = `/download/${this.currentTaskId}`;
        
        try {
            this.viewer3D.initializeViewers(
                this.originalViewer,
                this.optimizedViewer,
                originalUrl,
                optimizedUrl
            );
            
            // Enable camera syncing by default for better comparison experience
            setTimeout(() => {
                this.viewer3D.syncCameras();
                // Update button state to reflect default syncing
                this.syncCamerasBtn.innerHTML = '<i class="fas fa-unlink me-1"></i>Unsync Cameras';
                this.syncCamerasBtn.classList.remove('btn-outline-secondary');
                this.syncCamerasBtn.classList.add('btn-success');
            }, 1000); // Give viewers time to initialize
            
        } catch (error) {
            console.error('Failed to initialize 3D viewer:', error);
            // Show fallback message
            this.originalViewer.innerHTML = `
                <div class="model-viewer-error">
                    <i class="fas fa-exclamation-triangle fa-2x mb-2"></i>
                    <div>3D viewer not available</div>
                    <small class="text-muted">Models can still be downloaded</small>
                </div>
            `;
            this.optimizedViewer.innerHTML = `
                <div class="model-viewer-error">
                    <i class="fas fa-exclamation-triangle fa-2x mb-2"></i>
                    <div>3D viewer not available</div>
                    <small class="text-muted">Models can still be downloaded</small>
                </div>
            `;
        }
    }
}

// 3D Model Viewer Class using Three.js
class ModelViewer3D {
    constructor() {
        this.originalScene = null;
        this.optimizedScene = null;
        this.originalCamera = null;
        this.optimizedCamera = null;
        this.originalRenderer = null;
        this.optimizedRenderer = null;
        this.originalControls = null;
        this.optimizedControls = null;
        this.loader = new GLTFLoader();
        this.cameraSynced = false;
        this.isSynced = false;
    }
    
    initializeViewers(originalContainer, optimizedContainer, originalUrl, optimizedUrl) {
        // Clear containers
        originalContainer.innerHTML = '';
        optimizedContainer.innerHTML = '';
        
        // Initialize original viewer
        this.setupViewer(originalContainer, 'original').then(() => {
            this.loadModel(originalUrl, 'original');
        });
        
        // Initialize optimized viewer
        this.setupViewer(optimizedContainer, 'optimized').then(() => {
            this.loadModel(optimizedUrl, 'optimized');
        });
    }
    
    async setupViewer(container, type) {
        const width = container.clientWidth;
        const height = container.clientHeight;
        
        // Create scene
        const scene = new THREE.Scene();
        scene.background = new THREE.Color(0x1a1a2e);
        
        // Create camera
        const camera = new THREE.PerspectiveCamera(75, width / height, 0.1, 1000);
        camera.position.set(0, 0, 5);
        
        // Create renderer
        const renderer = new THREE.WebGLRenderer({ antialias: true });
        renderer.setSize(width, height);
        renderer.setPixelRatio(window.devicePixelRatio);
        renderer.shadowMap.enabled = true;
        renderer.shadowMap.type = THREE.PCFSoftShadowMap;
        renderer.toneMapping = THREE.ACESFilmicToneMapping;
        renderer.toneMappingExposure = 1;
        
        // Add lights
        const ambientLight = new THREE.AmbientLight(0x404040, 0.6);
        scene.add(ambientLight);
        
        const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);
        directionalLight.position.set(5, 5, 5);
        directionalLight.castShadow = true;
        directionalLight.shadow.mapSize.width = 2048;
        directionalLight.shadow.mapSize.height = 2048;
        scene.add(directionalLight);
        
        const directionalLight2 = new THREE.DirectionalLight(0xffffff, 0.4);
        directionalLight2.position.set(-5, -5, -5);
        scene.add(directionalLight2);
        
        // Create controls
        const controls = new OrbitControls(camera, renderer.domElement);
        controls.enableDamping = true;
        controls.dampingFactor = 0.05;
        controls.screenSpacePanning = false;
        controls.minDistance = 1;
        controls.maxDistance = 100;
        controls.maxPolarAngle = Math.PI;
        
        // Store references
        if (type === 'original') {
            this.originalScene = scene;
            this.originalCamera = camera;
            this.originalRenderer = renderer;
            this.originalControls = controls;
        } else {
            this.optimizedScene = scene;
            this.optimizedCamera = camera;
            this.optimizedRenderer = renderer;
            this.optimizedControls = controls;
        }
        
        // Add to container
        container.appendChild(renderer.domElement);
        
        // Handle resize
        const resizeObserver = new ResizeObserver(entries => {
            for (let entry of entries) {
                const { width, height } = entry.contentRect;
                camera.aspect = width / height;
                camera.updateProjectionMatrix();
                renderer.setSize(width, height);
            }
        });
        resizeObserver.observe(container);
        
        // Start render loop
        const animate = () => {
            requestAnimationFrame(animate);
            controls.update();
            renderer.render(scene, camera);
        };
        animate();
        
        return { scene, camera, renderer, controls };
    }
    
    loadModel(url, type) {
        const container = type === 'original' ? 
            document.getElementById('original-viewer') : 
            document.getElementById('optimized-viewer');
        
        // Show loading indicator
        this.showLoading(container, type);
        
        this.loader.load(
            url,
            (gltf) => {
                this.onModelLoaded(gltf, type);
            },
            (progress) => {
                // Progress callback
                const percent = (progress.loaded / progress.total * 100);
                this.updateLoadingProgress(container, percent);
            },
            (error) => {
                console.error(`Error loading ${type} model:`, error);
                this.showError(container, `Failed to load ${type} model`);
            }
        );
    }
    
    onModelLoaded(gltf, type) {
        const scene = type === 'original' ? this.originalScene : this.optimizedScene;
        const camera = type === 'original' ? this.originalCamera : this.optimizedCamera;
        const container = type === 'original' ? 
            document.getElementById('original-viewer') : 
            document.getElementById('optimized-viewer');
        
        // Remove loading indicator
        this.hideLoading(container);
        
        // Add model to scene
        const model = gltf.scene;
        scene.add(model);
        
        // Center and scale model
        const box = new THREE.Box3().setFromObject(model);
        const center = box.getCenter(new THREE.Vector3());
        const size = box.getSize(new THREE.Vector3());
        
        // Center the model
        model.position.sub(center);
        
        // Scale to fit in view
        const maxSize = Math.max(size.x, size.y, size.z);
        const scale = 3 / maxSize;
        model.scale.setScalar(scale);
        
        // Adjust camera position
        camera.position.set(0, 0, maxSize * 1.5);
        
        // Enable animations if present
        if (gltf.animations && gltf.animations.length > 0) {
            const mixer = new THREE.AnimationMixer(model);
            const action = mixer.clipAction(gltf.animations[0]);
            action.play();
            
            // Store mixer for animation updates
            const animate = () => {
                requestAnimationFrame(animate);
                mixer.update(0.01);
            };
            animate();
        }
        
        console.log(`${type} model loaded successfully`);
    }
    
    showLoading(container, type) {
        const loading = document.createElement('div');
        loading.className = 'model-loading';
        loading.innerHTML = `
            <div class="spinner-border" role="status"></div>
            <div>Loading ${type} model...</div>
        `;
        container.appendChild(loading);
    }
    
    updateLoadingProgress(container, percent) {
        const loading = container.querySelector('.model-loading div:last-child');
        if (loading) {
            loading.textContent = `Loading... ${Math.round(percent)}%`;
        }
    }
    
    hideLoading(container) {
        const loading = container.querySelector('.model-loading');
        if (loading) {
            loading.remove();
        }
    }
    
    showError(container, message) {
        container.innerHTML = `
            <div class="model-viewer-error">
                <i class="fas fa-exclamation-triangle fa-2x mb-2"></i>
                <div>${message}</div>
            </div>
        `;
    }
    
    syncCameras() {
        if (!this.originalCamera || !this.optimizedCamera || this.isSynced) return;
        
        this.cameraSynced = true;
        this.isSynced = true;
        
        // Sync optimized camera to original
        this.optimizedCamera.position.copy(this.originalCamera.position);
        this.optimizedCamera.rotation.copy(this.originalCamera.rotation);
        this.optimizedControls.target.copy(this.originalControls.target);
        this.optimizedControls.update();
        
        // Add sync indicators
        document.querySelector('#original-viewer').closest('.card').classList.add('camera-synced');
        document.querySelector('#optimized-viewer').closest('.card').classList.add('camera-synced');
        
        // Sync on camera changes
        this.originalControls.addEventListener('change', this.onCameraChange.bind(this));
    }
    
    unsyncCameras() {
        if (!this.isSynced) return;
        
        this.cameraSynced = false;
        this.isSynced = false;
        
        // Remove sync
        this.originalControls.removeEventListener('change', this.onCameraChange.bind(this));
        
        // Remove sync indicators
        document.querySelector('#original-viewer').closest('.card').classList.remove('camera-synced');
        document.querySelector('#optimized-viewer').closest('.card').classList.remove('camera-synced');
    }
    
    onCameraChange() {
        if (this.cameraSynced && this.optimizedCamera && this.optimizedControls) {
            this.optimizedCamera.position.copy(this.originalCamera.position);
            this.optimizedCamera.rotation.copy(this.originalCamera.rotation);
            this.optimizedControls.target.copy(this.originalControls.target);
            this.optimizedControls.update();
        }
    }
    
    resetCameras() {
        if (this.originalControls) {
            this.originalControls.reset();
        }
        if (this.optimizedControls) {
            this.optimizedControls.reset();
        }
        
        // Unsync cameras and update state
        this.unsyncCameras();
        
        // Reset sync button to default state
        const syncBtn = document.getElementById('sync-cameras-btn');
        if (syncBtn) {
            syncBtn.innerHTML = '<i class="fas fa-link me-1"></i>Sync Cameras';
            syncBtn.classList.remove('btn-success');
            syncBtn.classList.add('btn-outline-secondary');
        }
    }
}

// Initialize the application when DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
    new GLBOptimizer();
});
These corrections will ensure that the file upload functionality works as expected. After applying these changes, your users should be able to upload files without any issues.

